ylab("-log10 adjusted p-value") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
acerv_go.volcano
# Volcano plot
acerv_go.volcano <- ggplot(acerv_ByTreatment) +
geom_point(aes(x=log2FoldChange, y=-log10(padj), colour=GO.Slim.Term), size = 3) +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
acerv_go.volcano
acerv_ByTreatment$log2FoldChange <- "NA"
acerv_ByTreatment <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/GOSeq/acerv/acerv_sub_ByTreatment_GO.terms_20210327.csv")
names(acerv_ByTreatment)[names(acerv_ByTreatment) == "category"] <- "GO.IDs"
acerv_ByTreatment$diffexpressed <- "NA"
acerv_ByTreatment <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/GOSeq/acerv/acerv_sub_ByTreatment_GO.terms_20210327.csv")
names(acerv_ByTreatment)[names(acerv_ByTreatment) == "category"] <- "GO.IDs"
acerv_ByTreatment$diffexpressed <- "NA"
acerv_ByTreatment$diffexpressed[acerv_ByTreatment$diffexpressed > 0] <- "Up"
acerv_ByTreatment$diffexpressed[acerv_ByTreatment$diffexpressed < 0] <- "Down"
go.slim <- read_csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/GOSeq/GO-GOslim.csv")
colnames(go.slim) <- c("GO.IDs", "GO.Term", "GO.Slim.Term", "Cat") #rename columns
acerv_ByTreatment <- merge(acerv_ByTreatment, go.slim, by="GO.IDs", all = TRUE) # merge pdam info and GOslim
acerv_ByTreatment <- na.omit(acerv_ByTreatment)
acerv_ByTreatment <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/GOSeq/acerv/acerv_sub_ByTreatment_GO.terms_20210327.csv")
names(acerv_ByTreatment)[names(acerv_ByTreatment) == "category"] <- "GO.IDs"
acerv_ByTreatment$diffexpressed <- "NA"
acerv_ByTreatment$diffexpressed[acerv_ByTreatment$log2FoldChange > 0] <- "Up"
acerv_ByTreatment$diffexpressed[acerv_ByTreatment$log2FoldChange < 0] <- "Down"
go.slim <- read_csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/GOSeq/GO-GOslim.csv")
colnames(go.slim) <- c("GO.IDs", "GO.Term", "GO.Slim.Term", "Cat") #rename columns
acerv_ByTreatment <- merge(acerv_ByTreatment, go.slim, by="GO.IDs", all = TRUE) # merge pdam info and GOslim
acerv_ByTreatment <- na.omit(acerv_ByTreatment)
# Volcano plot
acerv_go.volcano <- ggplot(acerv_ByTreatment) +
geom_point(aes(x=log2FoldChange, y=-log10(padj), colour=diffexpressed, shape=GO.Slim.Term), size = 3) +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
acerv_go.volcano
acerv.DEG <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/DESeq2/acerv/acerv_sub_DEGs.all_treatment_20210219.csv")
acerv.DEG <- select(acerv.DEG, -X)
acerv.DEG$diffexpressed <- "NA"
acerv.DEG$diffexpressed[acerv.DEG$log2FoldChange > 0] <- "Up"
acerv.DEG$diffexpressed[acerv.DEG$log2FoldChange < 0] <- "Down"
# Set thresholds
padj.cutoff <- 0.05
lfc.cutoff <- 0.5
threshold <- acerv.DEG$padj < padj.cutoff & abs(acerv.DEG$log2FoldChange) > lfc.cutoff
length(which(threshold)) # this did not reduce anything, as the df only has DEGs in it?
# Add vector to df
acerv.DEG$threshold <- threshold
# Volcano plot w/ DEGs
acerv.volcano <- ggplot(acerv.DEG) +
geom_point(aes(x=log2FoldChange, y=-log10(padj), colour=Treatment_Compare), size = 2) +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
acerv.volcano
# Volcano plot w/ DEGs
acerv.volcano <- ggplot(acerv.DEG) +
geom_point(aes(x=log2FoldChange, y=-log10(padj), shape=Treatment_Compare, colour=diffexpressed), size = 2) +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
acerv.volcano
ggsave("~/Desktop/acerv_volcano_20210705.pdf", acerv.volcano, width = 25, height = 25)
acerv_ByTreatment <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/GOSeq/acerv/acerv_sub_ByTreatment_GO.terms_20210327.csv")
names(acerv_ByTreatment)[names(acerv_ByTreatment) == "category"] <- "GO.IDs"
acerv_ByTreatment$diffexpressed <- "NA"
acerv_ByTreatment$diffexpressed[acerv_ByTreatment$log2FoldChange > 0] <- "Up"
acerv_ByTreatment$diffexpressed[acerv_ByTreatment$log2FoldChange < 0] <- "Down"
# Read in GO slim info
go.slim <- read_csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/GOSeq/GO-GOslim.csv")
colnames(go.slim) <- c("GO.IDs", "GO.Term", "GO.Slim.Term", "Cat") #rename columns
acerv_ByTreatment <- merge(acerv_ByTreatment, go.slim, by="GO.IDs", all = TRUE) # merge pdam info and GOslim
acerv_ByTreatment <- na.omit(acerv_ByTreatment)
# Volcano plot
acerv_go.volcano <- ggplot(acerv_ByTreatment) +
geom_point(aes(x=log2FoldChange, y=-log10(padj), colour=diffexpressed, shape=GO.Slim.Term), size = 3) +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
acerv_go.volcano
ggsave("~/Desktop/acerv_volcano.GOterms_20210705.pdf", acerv_go.volcano, width = 25, height = 25)
ggsave("~/Desktop/acerv_volcano_20210705.jpeg", acerv.volcano, width = 25, height = 25)
ggsave("~/Desktop/acerv_volcano.GOterms_20210705.jpeg", acerv_go.volcano, width = 25, height = 25)
mcav_counts <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/DESeq2/mcav/mcav_gene_count_matrix.csv", header = TRUE, row.names = "gene_id")
dim(mcav_counts) # 25142 x 15
head(mcav_counts)
for ( col in 1:ncol(mcav_counts)){
colnames(mcav_counts)[col] <-  sub(".fastq.trim.fq.Aligned.sortedByCoord.out.bam.merge.gtf", "", colnames(mcav_counts)[col])
}
for ( col in 1:ncol(mcav_counts)){
colnames(mcav_counts)[col] <-  gsub("X", "", colnames(mcav_counts)[col])
}
# Load gene count matrix
mcav_counts <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/DESeq2/mcav/mcav_gene_count_matrix.csv", header = TRUE, row.names = "gene_id")
mcav_counts_filt <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/DESeq2/mcav/mcav_counts_filtered.csv", header = T)
View(mcav_counts_filt)
mcav_counts_filt <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/DESeq2/mcav/mcav_counts_filtered.csv", header = T, row.names = "gene_id")
View(mcav_counts_filt)
storage.mode(mcav_counts_filt) <- "integer" # stores count data as integer
# Checking to make sure rownames in metadata == colnames in counts data
all(rownames(mcav_metadata) %in% colnames(mcav_counts_filt)) # must come out TRUE
# Set Treatment as a factor
mcav_metadata$Treatment <- factor(mcav_metadata$Treatment, levels = c("control", "Treatment1", "Treatment2", "Treatment3", "Treatment4"))
data <- DESeqDataSetFromMatrix(countData = mcav_counts_filt, colData = mcav_metadata, design = ~ Treatment)
# PCA.plot <- plotPCA(unique.rsig, intgroup = "Treatment") # plot PCA of all samples for DEG only
# PCA.plot
# PC.info <- PCA.plot$data
mcav<- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/DESeq2/mcav/mcav_unique.sig.list_20210208.csv")
unique.vst.sig <- varianceStabilizingTransformation(mcav, blind = FALSE) # apply a regularized log transformation to minimize effects of small counts and normalize wrt library
# PCA plot of diff-expressed genes
mcav_DEGPCAdata <- plotPCA(unique.vst.sig, intgroup = c("Treatment"), returnData=TRUE)
percentVar_pca_mcav <- round(100*attr(mcav_DEGPCAdata, "percentVar")) #plot PCA of samples with all data
mcav_DEGPCAplot <- ggplot(mcav_DEGPCAdata, aes(PC1, PC2, color=Treatment)) +
geom_point(size=8) +
#geom_text(aes(label=name), hjust=0, vjust=0) +
xlab(paste0("PC1: ",percentVar_pca_mcav[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_pca_mcav[2],"% variance")) +
#scale_color_manual(values = c(control="black", Treatment1="skyblue1", Treatment2="skyblue2", Treatment3="skyblue3", Treatment4="skyblue4")) +
#scale_color_manual(values = c(control="black", Treatment1="cadetblue3", Treatment2="palevioletred", Treatment3="darkgreen", Treatment4="orange")) +
scale_color_manual(values = c(control="gray", Treatment1="darkslategray1", Treatment2="darkslategray3", Treatment3="darkslategray4", Treatment4="darkslategray")) +
coord_fixed() +
#ggtitle("M. cavernosa") +
theme_bw() + #Set background color
theme(axis.text = element_text(size = 20),
axis.title = element_text(size=25),
#title = element_text(size=30),
legend.position = "none",
panel.border = element_blank(), # Set border
#panel.grid.major = element_blank(), #Set major gridlines
#panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) #Set the plot background
mcav_DEGPCAplot
library("DESeq2")
library("tidyverse")
library("dplyr")
library("pheatmap")
library("RColorBrewer")
library("genefilter")
library("ggplot2")
library("gplots")
library("limma")
library("spdep")
library("adegenet")
library("goseq")
library("gridExtra")
library("clusterProfiler")
library(stringr)
# Load gene count matrix
mcav_counts <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/DESeq2/mcav/gene_count_mcav_only_matrix.csv", header = TRUE, row.names = "gene_id")
dim(mcav_counts) # 25142 x 15
head(mcav_counts)
for ( col in 1:ncol(mcav_counts)){
colnames(mcav_counts)[col] <-  sub(".fastq.trim.fq.Aligned.sortedByCoord.out.bam.merge.gtf", "", colnames(mcav_counts)[col])
}
for ( col in 1:ncol(mcav_counts)){
colnames(mcav_counts)[col] <-  gsub("X", "", colnames(mcav_counts)[col])
}
metadata <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Data/FL_sediment_metadata.csv", header = TRUE)
dim(metadata) # 45 by 15
head(metadata)
# Selecting only the columns I need for analyses
metadata <- select(metadata, c(Rep, Species, Treatment.in.mg.L.of.sediment, Location, File.Name.fastq))
# Renaming cols
colnames(metadata) <-c("Replicate","Species", "Treatment", "Location", "SampleID")
# Select Mcav species only
mcav_metadata <- subset(metadata, Species=="Montastraea cavernosa")
# Renaming treatments
mcav_metadata$Treatment <- gsub("Ctl", "control", mcav_metadata$Treatment)
mcav_metadata$Treatment <- gsub("T1", "Treatment1", mcav_metadata$Treatment)
mcav_metadata$Treatment <- gsub("T2", "Treatment2", mcav_metadata$Treatment)
mcav_metadata$Treatment <- gsub("T3", "Treatment3", mcav_metadata$Treatment)
mcav_metadata$Treatment <- gsub("T4", "Treatment4", mcav_metadata$Treatment)
# Removing unwanted text from SampleID
mcav_metadata$SampleID <- gsub(".txt.gz", "", mcav_metadata$SampleID)
mcav_metadata$SampleID <- gsub(";.*", "", mcav_metadata$SampleID)
mcav_metadata$SampleID <- gsub(".fastq.gz", "", mcav_metadata$SampleID)
mcav_metadata$SampleID <- sub("\\.", "", mcav_metadata$SampleID)
# Making sampleID as rownames in metadata
rownames(mcav_metadata) <- mcav_metadata$SampleID
# Filter reads by proportion of samples containing cutoff value
filt <- filterfun(pOverA(0.85, 5)) # set filter values for P over A; I used 0.85 and 5
tfil <- genefilter(mcav_counts, filt) # create filter for counts data
keep <- mcav_counts[tfil,] # identify genes to keep based on filter
gn.keep <- rownames(keep)
mcav_counts_filt <- as.matrix(mcav_counts[which(rownames(mcav_counts) %in% gn.keep),])
storage.mode(mcav_counts_filt) <- "integer" # stores count data as integer
# Checking to make sure rownames in metadata == colnames in counts data
all(rownames(mcav_metadata) %in% colnames(mcav_counts_filt)) # must come out TRUE
# Set Treatment as a factor
mcav_metadata$Treatment <- factor(mcav_metadata$Treatment, levels = c("control", "Treatment1", "Treatment2", "Treatment3", "Treatment4"))
data <- DESeqDataSetFromMatrix(countData = mcav_counts_filt, colData = mcav_metadata, design = ~ Treatment)
# Differential gene expression analysis
DEG.int <- DESeq(data) # run differential expression test by treatment (?) using wald test
# estimating size factors
# estimating dispersions
# gene-wise dispersion estimates
# mean-dispersion relationship
# final dispersion estimates
# fitting model and testing
DEG.int.res <- results(DEG.int) # save DE results ; why does it say 'Wald test p-value: Treatment Treatment4 vs control' for DEG.int.res? Is it only looking at treatment 4 and control? In DESeq object created above, it says that design is Treatment
resultsNames(DEG.int)
DEG_control_vs_T1 <- results(DEG.int, contrast = c("Treatment", "control", "Treatment1")) # results of DESeq2 comparing C and T1
DEG_control_vs_T1
DEG_control_vs_T1 <- as.data.frame(DEG_control_vs_T1) # make results into a df
DEG_control_vs_T1["Treatment_Compare"] <- "CvsT1"
DEG_control_vs_T1.sig.num <- sum(DEG_control_vs_T1$padj <0.05, na.rm = T) # identify # of significant pvalues with 5%FDR (padj<0.05)
DEG_control_vs_T1.sig.num
# 19 DEGs
DEG_control_vs_T1.sig <- subset(DEG_control_vs_T1, padj <0.05) # identify and subset significant pvalues
DEG_control_vs_T1.sig["Treatment_Compare"] <- "CvsT1" # adding treatment comparison column
DEG_control_vs_T1.sig.list <- data[which(rownames(data) %in% rownames(DEG_control_vs_T1.sig)),] # subset list of significant genes from original count data
DEG_control_vs_T1.sig.list <- as.data.frame(counts(DEG_control_vs_T1.sig.list)) # make list of sig gene counts into a df
DEG_control_vs_T1.sig.list_full <- cbind(DEG_control_vs_T1.sig, DEG_control_vs_T1.sig.list) # bind results with gene counts for DEGs
DEG_control_vs_T1.vst.sig <- varianceStabilizingTransformation(DEG_control_vs_T1.sig.list, blind = FALSE) # apply a regularized log transformation to minimize effects of small counts and normalize wrt library
# Compare C vs T2
DEG_control_vs_T2 <- results(DEG.int, contrast = c("Treatment", "control", "Treatment2")) # results of DESeq2 comparing C and T1
DEG_control_vs_T2
DEG_control_vs_T2 <- as.data.frame(DEG_control_vs_T2) # make results into a df
DEG_control_vs_T2["Treatment_Compare"] <- "CvsT2" # adding treatment comparison column
DEG_control_vs_T2.sig.num <- sum(DEG_control_vs_T2$padj <0.05, na.rm = T) # identify # of significant pvalues with 5%FDR (padj<0.05)
DEG_control_vs_T2.sig.num
# 43 DEGs
DEG_control_vs_T2.sig <- subset(DEG_control_vs_T2, padj <0.05) # identify and subset significant pvalues
DEG_control_vs_T2.sig["Treatment_Compare"] <- "CvsT2" # adding treatment comparison column
DEG_control_vs_T2.sig.list <- data[which(rownames(data) %in% rownames(DEG_control_vs_T2.sig)),] # subset list of significant genes from original count data
DEG_control_vs_T2.sig.list <- as.data.frame(counts(DEG_control_vs_T2.sig.list)) # make list of sig gene counts into a df
DEG_control_vs_T2.sig.list_full <- cbind(DEG_control_vs_T2.sig, DEG_control_vs_T2.sig.list) # bind results with gene counts for DEGs
DEG_control_vs_T2.vst.sig <- varianceStabilizingTransformation(DEG_control_vs_T2.sig.list, blind = FALSE) # apply a regularized log transformation to minimize effects of small counts and normalize wrt library
# Compare C vs T3
DEG_control_vs_T3 <- results(DEG.int, contrast = c("Treatment", "control", "Treatment3")) # results of DESeq2 comparing C and T1
DEG_control_vs_T3
DEG_control_vs_T3 <- as.data.frame(DEG_control_vs_T3) # make results into a df
DEG_control_vs_T3["Treatment_Compare"] <- "CvsT3" # adding treatment comparison column
DEG_control_vs_T3.sig.num <- sum(DEG_control_vs_T3$padj <0.05, na.rm = T) # identify # of significant pvalues with 5%FDR (padj<0.05)
DEG_control_vs_T3.sig.num
# 26 DEGs
DEG_control_vs_T3.sig <- subset(DEG_control_vs_T3, padj <0.05) # identify and subset significant pvalues
DEG_control_vs_T3.sig["Treatment_Compare"] <- "CvsT3" # adding treatment comparison column
DEG_control_vs_T3.sig.list <- data[which(rownames(data) %in% rownames(DEG_control_vs_T3.sig)),] # subset list of significant genes from original count data
DEG_control_vs_T3.sig.list <- as.data.frame(counts(DEG_control_vs_T3.sig.list)) # make list of sig gene counts into a df
DEG_control_vs_T3.sig.list_full <- cbind(DEG_control_vs_T3.sig, DEG_control_vs_T3.sig.list) # bind results with gene counts for DEGs
DEG_control_vs_T3.vst.sig <- varianceStabilizingTransformation(DEG_control_vs_T3.sig.list, blind = FALSE) # apply a regularized log transformation to minimize effects of small counts and normalize wrt library
# Compare C vs T4
DEG_control_vs_T4 <- results(DEG.int, contrast = c("Treatment", "control", "Treatment4")) # results of DESeq2 comparing C and T1
DEG_control_vs_T4
DEG_control_vs_T4 <- as.data.frame(DEG_control_vs_T4) # make results into a df
DEG_control_vs_T4["Treatment_Compare"] <- "CvsT4" # adding treatment comparison column
DEG_control_vs_T4.sig.num <- sum(DEG_control_vs_T4$padj <0.05, na.rm = T) # identify # of significant pvalues with 5%FDR (padj<0.05)
DEG_control_vs_T4.sig.num
# 18 DEGs
DEG_control_vs_T4.sig <- subset(DEG_control_vs_T4, padj <0.05) # identify and subset significant pvalues
DEG_control_vs_T4.sig["Treatment_Compare"] <- "CvsT4" # adding treatment comparison column
DEG_control_vs_T4.sig.list <- data[which(rownames(data) %in% rownames(DEG_control_vs_T4.sig)),] # subset list of significant genes from original count data
DEG_control_vs_T4.sig.list <- as.data.frame(counts(DEG_control_vs_T4.sig.list)) # make list of sig gene counts into a df
DEG_control_vs_T4.sig.list_full <- cbind(DEG_control_vs_T4.sig, DEG_control_vs_T4.sig.list) # bind results with gene counts for DEGs
DEG_control_vs_T4.vst.sig <- varianceStabilizingTransformation(DEG_control_vs_T4.sig.list, blind = FALSE) # apply a regularized log transformation to minimize effects of small counts and normalize wrt library
# Compare T1 vs T2
DEG_T1_vs_T2 <- results(DEG.int, contrast = c("Treatment", "Treatment1", "Treatment2")) # results of DESeq2 comparing C and T1
DEG_T1_vs_T2
DEG_T1_vs_T2 <- as.data.frame(DEG_T1_vs_T2) # make results into a df
DEG_T1_vs_T2["Treatment_Compare"] <- "T1vsT2" # adding treatment comparison column
DEG_T1_vs_T2.sig.num <- sum(DEG_T1_vs_T2$padj <0.05, na.rm = T) # identify # of significant pvalues with 5%FDR (padj<0.05)
DEG_T1_vs_T2.sig.num
# Compare T1 vs T3
DEG_T1_vs_T3 <- results(DEG.int, contrast = c("Treatment", "Treatment1", "Treatment3")) # results of DESeq2 comparing C and T1
DEG_T1_vs_T3
DEG_T1_vs_T3 <- as.data.frame(DEG_T1_vs_T3) # make results into a df
DEG_T1_vs_T3["Treatment_Compare"] <- "T1vsT3" # adding treatment comparison column
DEG_T1_vs_T3.sig.num <- sum(DEG_T1_vs_T3$padj <0.05, na.rm = T) # identify # of significant pvalues with 5%FDR (padj<0.05)
DEG_T1_vs_T3.sig.num
# 1 DEGs
DEG_T1_vs_T3.sig <- subset(DEG_T1_vs_T3, padj <0.05) # identify and subset significant pvalues
DEG_T1_vs_T3.sig["Treatment_Compare"] <- "T1vsT3" # adding treatment comparison column
DEG_T1_vs_T3.sig.list <- data[which(rownames(data) %in% rownames(DEG_T1_vs_T3.sig)),] # subset list of significant genes from original count data
DEG_T1_vs_T3.sig.list <- as.data.frame(counts(DEG_T1_vs_T3.sig.list)) # make list of sig gene counts into a df
DEG_T1_vs_T3.sig.list_full <- cbind(DEG_T1_vs_T3.sig, DEG_T1_vs_T3.sig.list) # bind results with gene counts for DEGs
DEG_T1_vs_T3.vst.sig <- varianceStabilizingTransformation(DEG_T1_vs_T3.sig.list, blind = FALSE) # apply a regularized log transformation to minimize effects of small counts and normalize wrt library
# Compare T1 vs T4
DEG_T1_vs_T4 <- results(DEG.int, contrast = c("Treatment", "Treatment1", "Treatment4")) # results of DESeq2 comparing C and T1
DEG_T1_vs_T4
DEG_T1_vs_T4 <- as.data.frame(DEG_T1_vs_T4) # make results into a df
DEG_T1_vs_T4["Treatment_Compare"] <- "T1vsT4" # adding treatment comparison column
DEG_T1_vs_T4.sig.num <- sum(DEG_T1_vs_T4$padj <0.05, na.rm = T) # identify # of significant pvalues with 5%FDR (padj<0.05)
DEG_T1_vs_T4.sig.num
# Compare T2 vs T3
DEG_T2_vs_T3 <- results(DEG.int, contrast = c("Treatment", "Treatment2", "Treatment3")) # results of DESeq2 comparing C and T1
DEG_T2_vs_T3
DEG_T2_vs_T3 <- as.data.frame(DEG_T2_vs_T3) # make results into a df
DEG_T2_vs_T3["Treatment_Compare"] <- "T2vsT3" # adding treatment comparison column
DEG_T2_vs_T3.sig.num <- sum(DEG_T2_vs_T3$padj <0.05, na.rm = T) # identify # of significant pvalues with 5%FDR (padj<0.05)
DEG_T2_vs_T3.sig.num
# 1 DEG
DEG_T2_vs_T3.sig <- subset(DEG_T2_vs_T3, padj <0.05) # identify and subset significant pvalues
DEG_T2_vs_T3.sig["Treatment_Compare"] <- "T2vsT3" # adding treatment comparison column
DEG_T2_vs_T3.sig.list <- data[which(rownames(data) %in% rownames(DEG_T2_vs_T3.sig)),] # subset list of significant genes from original count data
DEG_T2_vs_T3.sig.list <- as.data.frame(counts(DEG_T2_vs_T3.sig.list)) # make list of sig gene counts into a df
DEG_T2_vs_T3.sig.list_full <- cbind(DEG_T2_vs_T3.sig, DEG_T2_vs_T3.sig.list) # bind results with gene counts for DEGs
DEG_T2_vs_T3.vst.sig <- varianceStabilizingTransformation(DEG_T3_vs_T3.sig.list, blind = FALSE) # apply a regularized log transformation to minimize effects of small counts and normalize wrt library
# Compare T2 vs T4
DEG_T2_vs_T4 <- results(DEG.int, contrast = c("Treatment", "Treatment2", "Treatment4")) # results of DESeq2 comparing C and T1
DEG_T2_vs_T4
DEG_T2_vs_T4 <- as.data.frame(DEG_T2_vs_T4) # make results into a df
DEG_T2_vs_T4["Treatment_Compare"] <- "T2vsT4" # adding treatment comparison column
DEG_T2_vs_T4.sig.num <- sum(DEG_T2_vs_T4$padj <0.05, na.rm = T) # identify # of significant pvalues with 5%FDR (padj<0.05)
DEG_T2_vs_T4.sig.num
# Compare T2 vs T4
DEG_T3_vs_T4 <- results(DEG.int, contrast = c("Treatment", "Treatment3", "Treatment4")) # results of DESeq2 comparing C and T1
DEG_T3_vs_T4
DEG_T3_vs_T4 <- as.data.frame(DEG_T3_vs_T4) # make results into a df
DEG_T3_vs_T4["Treatment_Compare"] <- "T3vsT4" # adding treatment comparison column
DEG_T3_vs_T4.sig.num <- sum(DEG_T3_vs_T4$padj <0.05, na.rm = T) # identify # of significant pvalues with 5%FDR (padj<0.05)
DEG_T3_vs_T4.sig.num
DEG_control_vs_T1.sig.list_full$gene_id <- rownames(DEG_control_vs_T1.sig.list_full)
rownames(DEG_control_vs_T1.sig.list_full) <- NULL
DEG_control_vs_T2.sig.list_full$gene_id <- rownames(DEG_control_vs_T2.sig.list_full)
rownames(DEG_control_vs_T2.sig.list_full) <- NULL
DEG_control_vs_T3.sig.list_full$gene_id <- rownames(DEG_control_vs_T3.sig.list_full)
rownames(DEG_control_vs_T3.sig.list_full) <- NULL
DEG_control_vs_T4.sig.list_full$gene_id <- rownames(DEG_control_vs_T4.sig.list_full)
rownames(DEG_control_vs_T4.sig.list_full) <- NULL
DEG_T1_vs_T3.sig.list_full$gene_id <- rownames(DEG_T1_vs_T3.sig.list_full)
rownames(DEG_T1_vs_T3.sig.list_full) <- NULL
DEG_T2_vs_T3.sig.list_full$gene_id <- rownames(DEG_T2_vs_T3.sig.list_full)
rownames(DEG_T2_vs_T3.sig.list_full) <- NULL
DEGs.all <- rbind(DEG_control_vs_T1.sig.list_full,
DEG_control_vs_T2.sig.list_full,
DEG_control_vs_T3.sig.list_full,
DEG_control_vs_T4.sig.list_full,
DEG_T1_vs_T3.sig.list_full,
DEG_T2_vs_T3.sig.list_full)
dim(DEGs.all) # 108 x 23
DEGs.all_mcav <- DEGs.all$gene_id
DEGs.all_mcav <- unique(DEGs.all_mcav)
DEGs.all_mcav <- as.data.frame(DEGs.all_mcav)
dim(DEGs.all_mcav) # 62 unique DEGs among treatment comparisons
unique.sig.list <- data[which(rownames(data) %in% DEGs.all_mcav$DEGs), ]
# PCA plot of diff-expressed genes
mcav_DEGPCAdata <- plotPCA(unique.vst.sig, intgroup = c("Treatment"), returnData=TRUE)
percentVar_pca_mcav <- round(100*attr(mcav_DEGPCAdata, "percentVar")) #plot PCA of samples with all data
mcav_DEGPCAplot <- ggplot(mcav_DEGPCAdata, aes(PC1, PC2, color=Treatment)) +
geom_point(size=8) +
#geom_text(aes(label=name), hjust=0, vjust=0) +
xlab(paste0("PC1: ",percentVar_pca_mcav[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_pca_mcav[2],"% variance")) +
#scale_color_manual(values = c(control="black", Treatment1="skyblue1", Treatment2="skyblue2", Treatment3="skyblue3", Treatment4="skyblue4")) +
#scale_color_manual(values = c(control="black", Treatment1="cadetblue3", Treatment2="palevioletred", Treatment3="darkgreen", Treatment4="orange")) +
scale_color_manual(values = c(control="gray", Treatment1="darkslategray1", Treatment2="darkslategray3", Treatment3="darkslategray4", Treatment4="darkslategray")) +
coord_fixed() +
#ggtitle("M. cavernosa") +
theme_bw() + #Set background color
theme(axis.text = element_text(size = 20),
axis.title = element_text(size=25),
#title = element_text(size=30),
legend.position = "none",
panel.border = element_blank(), # Set border
#panel.grid.major = element_blank(), #Set major gridlines
#panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) #Set the plot background
mcav_DEGPCAplot
# PCA plot of diff-expressed genes
mcav_DEGPCAdata <- plotPCA(unique.vst.sig, intgroup = c("Treatment"), returnData=TRUE)
percentVar_pca_mcav <- round(100*attr(mcav_DEGPCAdata, "percentVar")) #plot PCA of samples with all data
mcav_DEGPCAplot <- ggplot(mcav_DEGPCAdata, aes(PC1, PC2, color=Treatment)) +
geom_point(size=8) +
#geom_text(aes(label=name), hjust=0, vjust=0) +
xlab(paste0("PC1: ",percentVar_pca_mcav[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_pca_mcav[2],"% variance")) +
#scale_color_manual(values = c(control="black", Treatment1="skyblue1", Treatment2="skyblue2", Treatment3="skyblue3", Treatment4="skyblue4")) +
#scale_color_manual(values = c(control="black", Treatment1="cadetblue3", Treatment2="palevioletred", Treatment3="darkgreen", Treatment4="orange")) +
scale_color_manual(values = c(control="gray", Treatment1="darkslategray1", Treatment2="darkslategray3", Treatment3="darkslategray4", Treatment4="darkslategray")) +
coord_fixed() +
#ggtitle("M. cavernosa") +
theme_bw() + #Set background color
theme(axis.text = element_text(size = 20),
axis.title = element_text(size=25),
#title = element_text(size=30),
legend.position = "none",
panel.border = element_blank(), # Set border
#panel.grid.major = element_blank(), #Set major gridlines
#panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) #Set the plot background
mcav_DEGPCAplot
# PCA plot of diff-expressed genes
mcav <- read_csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/DESeq2/mcav/mcav_unique.sig.list_20210208.csv")
unique.vst.sig <- varianceStabilizingTransformation(mcav, blind = FALSE) # apply a regularized log transformation to minimize effects of small counts and normalize wrt library
mcav_DEGPCAdata <- plotPCA(unique.vst.sig, intgroup = c("Treatment"), returnData=TRUE)
# Load packages
library("DESeq2")
library("tidyverse")
library("dplyr")
library("pheatmap")
library("RColorBrewer")
library("genefilter")
library("ggplot2")
library("gplots")
library("limma")
library("spdep")
library("adegenet")
library("goseq")
library("gridExtra")
library("clusterProfiler")
library(stringr)
mcav_counts <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/DESeq2/mcav/gene_count_mcav_only_matrix.csv", header = TRUE, row.names = "gene_id")
dim(mcav_counts) # 25142 x 15
head(mcav_counts)
for ( col in 1:ncol(mcav_counts)){
colnames(mcav_counts)[col] <-  sub(".fastq.trim.fq.Aligned.sortedByCoord.out.bam.merge.gtf", "", colnames(mcav_counts)[col])
}
for ( col in 1:ncol(mcav_counts)){
colnames(mcav_counts)[col] <-  gsub("X", "", colnames(mcav_counts)[col])
}
# functional annotation gff
# annot <- read.csv("~/Desktop/GFFs/Mcav.gff.annotations.fixed_transcript.gff3",header = FALSE, sep="\t")
# colnames(annot) <- c("scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "attr")
# # annot$gene <- annot$attr
# annot <- annot[!grepl("##", annot$scaffold),]
# annot$gene <-gsub(";.*", "", annot$attr)
# annot$gene <-gsub("ID=", "", annot$gene)
# annot$gene <- gsub("-.*", "", annot$gene)
# Load metadata
metadata <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Data/FL_sediment_metadata.csv", header = TRUE)
dim(metadata) # 45 by 15
head(metadata)
# Selecting only the columns I need for analyses
metadata <- select(metadata, c(Rep, Species, Treatment.in.mg.L.of.sediment, Location, File.Name.fastq))
# Renaming cols
colnames(metadata) <-c("Replicate","Species", "Treatment", "Location", "SampleID")
# Select Mcav species only
mcav_metadata <- subset(metadata, Species=="Montastraea cavernosa")
# Renaming treatments
mcav_metadata$Treatment <- gsub("Ctl", "control", mcav_metadata$Treatment)
mcav_metadata$Treatment <- gsub("T1", "Treatment1", mcav_metadata$Treatment)
mcav_metadata$Treatment <- gsub("T2", "Treatment2", mcav_metadata$Treatment)
mcav_metadata$Treatment <- gsub("T3", "Treatment3", mcav_metadata$Treatment)
mcav_metadata$Treatment <- gsub("T4", "Treatment4", mcav_metadata$Treatment)
# Removing unwanted text from SampleID
mcav_metadata$SampleID <- gsub(".txt.gz", "", mcav_metadata$SampleID)
mcav_metadata$SampleID <- gsub(";.*", "", mcav_metadata$SampleID)
mcav_metadata$SampleID <- gsub(".fastq.gz", "", mcav_metadata$SampleID)
mcav_metadata$SampleID <- sub("\\.", "", mcav_metadata$SampleID)
# Making sampleID as rownames in metadata
rownames(mcav_metadata) <- mcav_metadata$SampleID
# Filter reads by proportion of samples containing cutoff value
filt <- filterfun(pOverA(0.85, 5)) # set filter values for P over A; I used 0.85 and 5
tfil <- genefilter(mcav_counts, filt) # create filter for counts data
keep <- mcav_counts[tfil,] # identify genes to keep based on filter
gn.keep <- rownames(keep)
mcav_counts_filt <- as.matrix(mcav_counts[which(rownames(mcav_counts) %in% gn.keep),])
storage.mode(mcav_counts_filt) <- "integer" # stores count data as integer
# Checking to make sure rownames in metadata == colnames in counts data
all(rownames(mcav_metadata) %in% colnames(mcav_counts_filt)) # must come out TRUE
# Set Treatment as a factor
mcav_metadata$Treatment <- factor(mcav_metadata$Treatment, levels = c("control", "Treatment1", "Treatment2", "Treatment3", "Treatment4"))
data <- DESeqDataSetFromMatrix(countData = mcav_counts_filt, colData = mcav_metadata, design = ~ Treatment)
# Expression visualization
# First we are going to log-transform the data using a variance stabilizing transforamtion (vst). This is only for visualization purposes.
# Essentially, this is roughly similar to putting the data on the log2 scale. It will deal with the sampling variability of low counts by calculating within-group variability (if blind=FALSE).
# Importantly, it does not use the design to remove variation in the data, and so can be used to examine if there may be any variability do to technical factors such as extraction batch effects.
# To do this we first need to calculate the size factors of our samples. This is a rough estimate of how many reads each sample contains compared to the others.
# In order to use VST (the faster log2 transforming process) to log-transform our data, the size factors need to be less than 4. Otherwise, there could be artefacts in our results.
SF.data <- estimateSizeFactors(data) #estimate size factors to determine if we can use vst  to transform our data. Size factors should be less than 4 to use vst
SF.data
print(sizeFactors(SF.data)) #view size factors
vst <- vst(data, blind = FALSE)
head(assay(vst), 3) # view data
sampleDists <- dist(t(assay(vst))) # calculate distance matrix
sampleDistMatrix <- as.matrix(sampleDists) # create distance matrix
rownames(sampleDistMatrix) <- colnames(vst) # assign row names
colnames(sampleDistMatrix) <- NULL # assign col names
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255) # assign colors
pheatmap(sampleDistMatrix, # plot matrix
clustering_distance_rows = sampleDists, # cluster rows
clustering_distance_cols = sampleDists, # cluster cols
col=colors) # set colors
plotPCA(vst, intgroup = c("Treatment")) # plot PCA of samples with all data
# Treatment2 has a weird outlier, may remove?
# Differential gene expression analysis
DEG.int <- DESeq(data) # run differential expression test by treatment (?) using wald test
# estimating size factors
# estimating dispersions
# gene-wise dispersion estimates
# mean-dispersion relationship
# final dispersion estimates
# fitting model and testing
DEG.int.res <- results(DEG.int) # save DE results ; why does it say 'Wald test p-value: Treatment Treatment4 vs control' for DEG.int.res? Is it only looking at treatment 4 and control? In DESeq object created above, it says that design is Treatment
resultsNames(DEG.int)
# Compare C vs T1
DEG_control_vs_T1 <- results(DEG.int, contrast = c("Treatment", "control", "Treatment1")) # results of DESeq2 comparing C and T1
DEG_control_vs_T1
DEG_control_vs_T1 <- as.data.frame(DEG_control_vs_T1) # make results into a df
DEG_control_vs_T1["Treatment_Compare"] <- "CvsT1" # adding treatment comparison column
DEG_control_vs_T1.sig.num <- sum(DEG_control_vs_T1$padj <0.05, na.rm = T) # identify # of significant pvalues with 5%FDR (padj<0.05)
DEG_control_vs_T1.sig.num
# 19 DEGs
DEG_control_vs_T1.sig <- subset(DEG_control_vs_T1, padj <0.05) # identify and subset significant pvalues
DEG_control_vs_T1.sig["Treatment_Compare"] <- "CvsT1" # adding treatment comparison column
DEG_control_vs_T1.sig.list <- data[which(rownames(data) %in% rownames(DEG_control_vs_T1.sig)),] # subset list of significant genes from original count data
DEG_control_vs_T1.sig.list <- as.data.frame(counts(DEG_control_vs_T1.sig.list)) # make list of sig gene counts into a df
DEG_control_vs_T1.sig.list_full <- cbind(DEG_control_vs_T1.sig, DEG_control_vs_T1.sig.list) # bind results with gene counts for DEGs
DEG_control_vs_T1.vst.sig <- varianceStabilizingTransformation(DEG_control_vs_T1.sig.list, blind = FALSE) # apply a regularized log transformation to minimize effects of small counts and normalize wrt library
