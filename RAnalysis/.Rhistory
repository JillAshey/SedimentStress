legend.position="none"
) +
xlab("") +
ylab("") +
ggtitle("Molecular Function") + #add a main title
theme(plot.title = element_text(face = 'bold',
size = 12,
hjust = 0)) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())#Set the plot background
MFplot
CCplot <- CC %>% mutate(term = fct_reorder(term, numDEInCat)) %>%
ggplot( aes(x=term, y=numDEInCat) ) +
geom_segment( aes(x=term ,xend=term, y=0, yend=numDEInCat), color="grey") +
geom_point(size=3, color="#69b3a2") +
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none"
) +
xlab("") +
ylab("") +
ggtitle("Cellular Component") + #add a main title
theme(plot.title = element_text(face = 'bold',
size = 12,
hjust = 0)) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())#Set the plot background
CCplot
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none") +
xlab("") +
ylab("") +
ggtitle("Biological Process") + #add a main title
theme(plot.title = element_text(face = 'bold',
size = 12,
hjust = 0)) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())#Set the plot background
BPplot <- BP %>% mutate(term = fct_reorder(term, numDEInCat)) %>%
ggplot( aes(x=term, y=numDEInCat) ) +
geom_segment( aes(x=term ,xend=term, y=0, yend=numDEInCat), color="grey") +
geom_point(size=3, color="#69b3a2") +
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="none") +
xlab("") +
ylab("") +
ggtitle("Biological Process") + #add a main title
theme(plot.title = element_text(face = 'bold',
size = 12,
hjust = 0)) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())#Set the plot background
BPplot
GOplot <- grid.arrange(MFplot, CCplot, BPplot, ncol=3, clip="off")
ggsave("~/Desktop/plob_GOplot_05.pdf", GOplot, width = 21, height = 21, units = c("in"))
# Combining all
GOplot2 <- enriched.GO.05 %>% drop_na(ontology) %>% mutate(term = fct_reorder(term, numDEInCat)) %>%
mutate(term = fct_reorder(term, ontology)) %>%
ggplot( aes(x=term, y=numDEInCat) ) +
geom_segment( aes(x=term ,xend=term, y=0, yend=numDEInCat), color="grey") +
geom_point(size=3, aes(colour = ontology)) +
geom_text(aes(label = over_represented_pvalue), hjust = 0, vjust = 0, size = 1) +
coord_flip() +
ylim(0,15) +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) #Set the plot background #set title attributes
GOplot2
View(ByTreatment_GO.terms)
colnames(GO.terms) <- c("gene_id", "category")
enriched_GO.terms <- merge(enriched.GO.05, GO.terms, by = "category", all.x = TRUE)
DEG_treatment <- read.csv("~/Desktop/plob_DEGs.all_treatment.csv", header = TRUE)
DEG_treatment <- select(DEG_treatment, -X)
colnames(DEG_treatment)[1] <-"gene_id"
ByTreatment_GO.terms <- merge(DEG_treatment, enriched_GO.terms, by = "gene_id", all.x = TRUE)
View(ByTreatment_GO.terms)
colnames(GO.terms) <- c("gene_id", "category")
enriched_GO.terms <- merge(enriched.GO.05, GO.terms, by = "category", all.x = TRUE)
DEG_treatment <- read.csv("~/Desktop/plob_DEGs.all_treatment.csv", header = TRUE)
#DEG_treatment <- select(DEG_treatment, -X)
colnames(DEG_treatment)[1] <-"gene_id"
ByTreatment_GO.terms <- merge(DEG_treatment, enriched_GO.terms, by = "gene_id", all.x = TRUE)
ByTreatment_GO.terms <- na.omit(ByTreatment_GO.terms)
# Merge GO terms and enriched list
colnames(GO.terms) <- c("gene_id", "category")
enriched_GO.terms <- merge(enriched.GO.05, GO.terms, by = "category", all.x = TRUE)
View(enriched_GO.terms)
DEG_treatment <- read.csv("~/Desktop/plob_DEGs.all_treatment.csv", header = TRUE)
View(DEG_treatment)
#DEG_treatment <- select(DEG_treatment, -X)
colnames(DEG_treatment)[2] <-"gene_id"
View(DEGs.all)
DEGs_CvsMid
# -- note: fitType='parametric', but the dispersion trend was not well captured by the
# function: y = a/x + b, and a local regression fit was automatically substituted.
# specify fitType='local' or 'mean' to avoid this message next time.
DEG_control_vs_mid.sig.list <- as.data.frame(counts(DEG_control_vs_mid.sig.list))
DEG_control_vs_mid.sig <- subset(DEG_control_vs_mid, padj <0.05) # identify and subset significant pvalues
DEG_control_vs_mid.sig.list <- data[which(rownames(data) %in% rownames(DEG_control_vs_mid.sig)),] # subsey list of significant genes from original count data
SFtest <- estimateSizeFactors(DEG_control_vs_mid.sig.list)
print(sizeFactors(SFtest))
DEG_control_vs_mid.rsig <- varianceStabilizingTransformation(DEG_control_vs_mid.sig.list, blind = FALSE)
# -- note: fitType='parametric', but the dispersion trend was not well captured by the
# -- note: fitType='parametric', but the dispersion trend was not well captured by the
# function: y = a/x + b, and a local regression fit was automatically substituted.
# specify fitType='local' or 'mean' to avoid this message next time.
DEG_control_vs_mid.sig.list <- as.data.frame(counts(DEG_control_vs_mid.sig.list))
DEG_control_vs_mid.sig.list
DEG_control_vs_mid.sig.list["Treatment_Compare"] <- "CvsMid" # adding treatment comparison column
DEG_control_vs_mid.sig.list
write.csv(DEG_control_vs_mid.sig.list, file = "~/Desktop/plob_control_vs_mid_DEG.csv")
DEG_mid_vs_high.sig.list
##### Unique genes from intersections of DEG
DEGs_CvsMid <- as.data.frame(row.names(DEG_control_vs_mid.sig.list))
DEGs_CvsMid
DEG_control_vs_mid.sig.list
##### Unique genes from intersections of DEG
DEGs_CvsMid <- as.data.frame(DEG_control_vs_mid.sig.list)
#colnames(DEGs_CvsMid) <- "DEGs"
DEGs_CvsHigh <- as.data.frame(DEG_control_vs_high.sig.list)
#colnames(DEGs_CvsHigh) <- "DEGs"
DEGs_MidvsHigh <- as.data.frame(DEG_mid_vs_high.sig.list)
DEGs.all <- rbind(DEGs_CvsMid, DEGs_CvsHigh, DEGs_MidvsHigh)
DEGs.all
write.csv(DEGs.all, file = "~/Desktop/plob_DEGs.all_treatment.csv")
DEG_treatment <- read.csv("~/Desktop/plob_DEGs.all_treatment.csv", header = TRUE)
View(DEG_treatment)
#DEG_treatment <- select(DEG_treatment, -X)
colnames(DEG_treatment$X) <-"gene_id"
#DEG_treatment <- select(DEG_treatment, -X)
colnames(DEG_treatment)[1] <-"gene_id"
ByTreatment_GO.terms <- merge(DEG_treatment, enriched_GO.terms, by = "gene_id", all.x = TRUE)
ByTreatment_GO.terms <- na.omit(ByTreatment_GO.terms)
ByTreatment_GO.terms
ByTreatment_GO.terms <- na.omit(ByTreatment_GO.terms)
# now I have a df with DEGs gene names, treatment comparisons, GO terms, and term info
write.csv(ByTreatment_GO.terms, file = "~/Desktop/plob_ByTreatment_GO.terms")
View(ByTreatment_GO.terms)
# Combining all
GOplot2 <- enriched.GO.05 %>% drop_na(ontology) %>% mutate(term = fct_reorder(term, numDEInCat)) %>%
mutate(term = fct_reorder(term, ontology)) %>%
ggplot( aes(x=term, y=numDEInCat) ) +
geom_segment( aes(x=term ,xend=term, y=0, yend=numDEInCat), color="grey") +
geom_point(size=3, aes(colour = ontology)) +
geom_text(aes(label = over_represented_pvalue), hjust = 0, vjust = 0, size = 1) +
coord_flip() +
ylim(0,15) +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) #Set the plot background #set title attributes
GOplot2
# Warning messages:
#   1: Removed 1 rows containing missing values (geom_segment).
# 2: Removed 1 rows containing missing values (geom_point).
# 3: Removed 1 rows containing missing values (geom_text).
# Got rid of my protein binding rows. thats okay for now because they werent all that interesting anyway
ggsave("~/Desktop/plot_GOplot2_05.pdf", GOplot2, width = 28, height = 28, units = c("in"))
View(GO.terms)
data <- read.csv("~/Desktop/Oysters_Honors_Thesis/HT_Data/Water_Quality_HT/Summary/HT_WQ_timeseries.csv", header = TRUE)
View(data)
library("ggplot2")
library("gplots")
library(dplyr)
ggplot(data, aes(x=Date, y=Temp_MR)) +
geom_line(color = "blue")
data <- gsub("/18", "", data$Date)
data <- read.csv("~/Desktop/Oysters_Honors_Thesis/HT_Data/Water_Quality_HT/Summary/HT_WQ_timeseries.csv", header = TRUE)
data <- gsub("/*.", "", data$Date)
data <- read.csv("~/Desktop/Oysters_Honors_Thesis/HT_Data/Water_Quality_HT/Summary/HT_WQ_timeseries.csv", header = TRUE)
data$Date <- gsub("/*.", "", data$Date)
data <- read.csv("~/Desktop/Oysters_Honors_Thesis/HT_Data/Water_Quality_HT/Summary/HT_WQ_timeseries.csv", header = TRUE)
data$Date <- gsub(".*/", "", data$Date)
data <- read.csv("~/Desktop/Oysters_Honors_Thesis/HT_Data/Water_Quality_HT/Summary/HT_WQ_timeseries.csv", header = TRUE)
data$Date <- gsub("*./", "", data$Date)
data <- read.csv("~/Desktop/Oysters_Honors_Thesis/HT_Data/Water_Quality_HT/Summary/HT_WQ_timeseries.csv", header = TRUE)
data$Date <- sub("_[^_]+$", "", data$Datex)
data$Date <- sub("_[^_]+$", "", data$Date)
data$Date <- gsub('(.*)_\\w+', '\\1', data$Date)
data$Date <- gsub("/18", "", data$Date)
data$Date[8,] <- paste0("/18")
data$Date[8,] <- paste0("/18", data$Date[8,])
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
plot(pressure)
mpg
knitr::opts_chunk$set(echo = TRUE)
# install packages if you don't have them yet
library("ggplot2")
mpg
mpg
type(mpg$year)
mpg
# Find dimensions of dataset
dim(mpg)
summary(mpg)
# Find dimensions of dataset
dim(mpg)
#
# Summary of all variables
summary(mpg)
# Dimensions of dataset
dim(mpg)
colnames(mpg)
# Summary of all variables
summary(mpg)
# Dimensions of dataset
dim(mpg)
colnames(mpg)
head(mpg, 20)
# Unique values in manufacturer column
unique(mpg$manufacturer)
# Unique values in manufacturer column
unique(mpg$class)
# Basic scatterplot
ggplot(data = mpg) +
geom_point(mapping = aes(x=cty, y=hwy))
# Basic scatterplot
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=hwy))
# Basic scatterplot
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y=cty))
?mpg
# Basic scatterplot
ggplot(data = mpg) + # data to use
geom_point(mapping = aes(x=displ, y=cty, color = model)) # what x and y variables are and how to map them
# displ = engine size
# cty = city miles per gallon
# Basic scatterplot
ggplot(data = mpg) + # data to use
geom_point(mapping = aes(x=displ, y=cty, color = manufacturer)) # what x and y variables are and how to map them
# displ = engine size
# cty = city miles per gallon
# Basic scatterplot
ggplot(data = mpg) + # data to use
geom_point(mapping = aes(x=displ, y=cty, color = class)) # what x and y variables are and how to map them; grouping by color
# Basic scatterplot
ggplot(data = mpg) + # data to use
geom_point(mapping = aes(x=displ, y=cty, shape = class)) # what x and y variables are and how to map them; grouping by color
# Basic scatterplot grouped by manual
ggplot(data = mpg) + # data to use
geom_point(mapping = aes(x=displ, y=cty)) + # what x and y variables are and how to map them
scale_color_manual(values = c(compact="black", midsize = "pink", suv = "darkgreen", seater = "blue", minivan = "purple", pickup = "brown", subcompact = "darkyellow"))
# Basic scatterplot grouped by manual
ggplot(data = mpg) + # data to use
geom_point(mapping = aes(x=displ, y=cty)) + # what x and y variables are and how to map them
scale_color_manual(class = c(compact="black", midsize = "pink", suv = "darkgreen", seater = "blue", minivan = "purple", pickup = "brown", subcompact = "darkyellow"))
# Basic scatterplot with best fit line
ggplot(data = mpg) + # data to use
geom_point(mapping = aes(x=displ, y=cty, color = class)) + # what x and y variables are and how to map them; grouping by color
geom_smooth()
# Basic scatterplot with best fit line
ggplot(data = mpg, mapping = aes(x=displ, y=cty)) + # data to use
geom_point(mapping = aes(color = class)) + # what x and y variables are and how to map them; grouping by color
geom_smooth()
plot(pressure)
# Unique values in class column
unique(mpg$class)
# Summary of only class variable
summary(mpg$class)
# Unique values in class column
unique(mpg$class)
length(unique(mpg$class))
# Summary of only class variable
summary(mpg$class)
# Basic scatterplot with best fit line
ggplot(data = mpg, mapping = aes(x=displ, y=cty)) + # data to use, what x and y variables are and how to map them
geom_point(mapping = aes(color = class)) + # grouping by color
geom_smooth() +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) #Set the plot background
# Basic scatterplot with best fit line
ggplot(data = mpg, mapping = aes(x=displ, y=cty)) + # data to use, what x and y variables are and how to map them
geom_point(mapping = aes(color = class)) + # grouping by color
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) #Set the plot background #set title attributes
# Basic scatterplot with best fit line
ggplot(data = mpg, mapping = aes(x=displ, y=cty)) + # data to use, what x and y variables are and how to map them
geom_point(mapping = aes(color = class)) + # grouping by color
xlab("") +
ylab("") +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) #Set the plot background #set title attributes
# Basic scatterplot with best fit line
ggplot(data = mpg, mapping = aes(x=displ, y=cty)) + # data to use, what x and y variables are and how to map them
geom_point(mapping = aes(color = class)) + # grouping by color
xlab("") +
ylab("") +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) #Set the plot background #set title attributes
# Basic scatterplot with best fit line
ggplot(data = mpg, mapping = aes(x=displ, y=cty)) + # data to use, what x and y variables are and how to map them
geom_point(mapping = aes(color = class)) + # grouping by color
xlab("Engine Displacement (L)", size = 4) +
ylab("") +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) #Set the plot background #set title attributes
?xlab
# Basic scatterplot with best fit line
ggplot(data = mpg, mapping = aes(x=displ, y=cty)) + # data to use, what x and y variables are and how to map them
geom_point(mapping = aes(color = class)) + # grouping by color
xlab("Engine Displacement (L)") +
ylab("City miles per gallon") +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) #Set the plot background #set title attributes
# Basic scatterplot with best fit line
ggplot(data = mpg, mapping = aes(x=displ, y=cty)) + # data to use, what x and y variables are and how to map them
geom_point(mapping = aes(color = class)) + # grouping by color
geom_smooth() +
xlab("Engine Displacement (L)") +
ylab("City miles per gallon") +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) #Set the plot background #set title attributes
# Basic scatterplot with best fit line
ggplot(data = mpg, mapping = aes(x=displ, y=cty)) + # data to use, what x and y variables are and how to map them
geom_point(mapping = aes(color = class)) + # grouping by color
geom_smooth() +
xlab("Engine displacement (L)") +
ylab("City miles per gallon") +
labs(title = "Jill's amazing plot", subtitle = "Jill's amazing subtitle") +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) #Set the plot background #set title attributes
# Basic scatterplot with best fit line
ggplot(data = mpg, mapping = aes(x=displ, y=cty)) + # data to use, what x and y variables are and how to map them
geom_point(mapping = aes(color = class)) + # grouping by color
geom_smooth() +
xlab("Engine displacement (L)") +
ylab("City miles per gallon") +
labs(title = "Jill's amazing plot") +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) #Set the plot background #set title attributes
knitr::opts_chunk$set(echo = TRUE)
# install packages if you don't have them yet
library("ggplot2")
mpg
type(mpg$year)
# Summary of all variables
summary(mpg)
# Dimensions of dataset
dim(mpg)
# Column names of dataset
colnames(mpg)
# First 20 rows of mpg
head(mpg, 20)
# Last 20 rows of mpg
tail(mpg, 20)
?type
typeof(mpg$year)
irus
iris
head(iris)
hist(iris$Sepal.Length)
unique(iris$Species)
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(rcompanion)
# Assumption 2
hist(iris$Sepal.Length)
## Make Q-Q plot to test the hypothesis that the data is normally distributed.  If the points on the plot are reasonably well approximated by a straight line, the popular Gaussian data hypothesis is plausible, while marked deviations from linearity provide evidence against this hypothesis and these data points should be removed.
fit<-lm(Sepal.Length~Species, data=iris)
par(mfrow=c(2,2))
qqnorm(residuals(fit), ylab="Residuals")
qqline(residuals(fit))
title("QQ-plot of residuals")
qqnorm(rstandard(fit), ylab="Residuals")
qqline(rstandard(fit))
title("QQ-plot of standardized residuals")
plot(fitted(fit), residuals(fit), xlab="Fitted", ylab="Residuals")
abline(h=0)
title("Residuals vs fitted")
plot(fitted(fit), abs(residuals(fit)), xlab="Fitted", ylab="Absolute residuals")
abline(h=0)
title("Absolute residuals vs fitted")
## Make Q-Q plot to test the hypothesis that the data is normally distributed.  If the points on the plot are reasonably well approximated by a straight line, the popular Gaussian data hypothesis is plausible, while marked deviations from linearity provide evidence against this hypothesis and these data points should be removed.
fit<-lm(Sepal.Length~Species, data=iris)
par(mfrow=c(2,2))
qqnorm(residuals(fit), ylab="Residuals")
qqline(residuals(fit))
# Assumption 3
## Do Levene test to assess variance and any departures from normality.
leveneTest(Sepal.Length~Species, data=iris)
# Assumption 2
## Make histogram to see if data is normally distributed
hist(iris$Sepal.Length)
# Assumption 3
## Do Levene test to compare group variance and any departures from normality.
leveneTest(Sepal.Length~Species, data=iris)
# Significant! That means the variance is common among groups.
bartlett.test(Sepal.Length~Species, data=iris) #normal
model <- lm(Sepal.Length ~ Species, data=iris)
model
summary(model)
anova(model)
unique(iris$Species)
hist(model)
hist(residuals(model))
test <- glht(model, linfct = mcp(Species = "Tukey"))
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(rcompanion)
library(multcomp)
test <- glht(model, linfct = mcp(Species = "Tukey"))
summary(test)
unique(iris$Species)
ggboxplot(iris, x = "Species", y = "Sepal.Length",
color = "Species", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
#order = c("setosa", "versicolor", "trt2"),
ylab = "Sepal Length", xlab = "Species")
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(rcompanion)
library(multcomp)
library(ggpubr)
ggboxplot(iris, x = "Species", y = "Sepal.Length",
color = "Species", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
#order = c("setosa", "versicolor", "virginica"),
ylab = "Sepal Length", xlab = "Species")
#
ggqqplot(residuals(model))
hist(model$residuals)
# Variance
plot(fitted(model), residuals(model))
# variation of ggplot2, ggboxplot
ggboxplot(iris, x = "Species", y = "Sepal.Length",
color = "Species", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c("setosa", "versicolor", "virginica"),
ylab = "Sepal Length", xlab = "Species")
# variation of ggplot2, ggline
#ggline(iris, x = "Species", y = "Sepal.Length",
add = c("mean_se", "jitter"),
# variation of ggplot2, ggboxplot
ggboxplot(iris, x = "Species", y = "Sepal.Length",
color = "Species", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c("setosa", "versicolor", "virginica"),
ylab = "Sepal Length", xlab = "Species")
# variation of ggplot2, ggline
ggline(iris, x = "Species", y = "Sepal.Length",
add = c("mean_se", "jitter"),
order = c("setosa", "versicolor", "virginica"),
ylab = "Sepal Length", xlab = "Species")
